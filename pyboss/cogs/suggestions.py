import os
from datetime import datetime

import discord
from discord.ext import commands

from ..utils import database as db

OWNER_ID = int(os.getenv("OWNER_ID"))


def suggestion_channel(ctx):
    if not isinstance(ctx.channel, discord.DMChannel):
        return "suggestion" in ctx.channel.name
    return False


class Suggestion(commands.Cog):
    """
    Offers commands to allow members to propose suggestions and interact with them
    """

    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="suggestions_rules", hidden=True)
    @commands.is_owner()
    @commands.check(suggestion_channel)
    async def send_suggestions_rules(self, ctx):
        """
        Send the rules for suggestion channel
        """
        await ctx.message.delete()
        with open("../static/text/suggestions_rules.md", encoding="utf-8") as f:
            content = f.read()
        embed = discord.Embed(
            title="Fonctionnement des suggestions", description=content, colour=0xFF66FF
        )
        embed.set_thumbnail(url=ctx.guild.icon_url)
        embed.set_footer(
            text=f"Generated by {self.bot.user.name} | {datetime.now():%D - %H:%M}"
        )
        await ctx.send(embed=embed)

    @commands.Cog.listener("on_message")
    async def make_suggestion(self, message):
        if suggestion_channel(message):
            await message.add_reaction("✅")
            await message.add_reaction("❌")

    @commands.Cog.listener("on_raw_reaction_add")
    async def decisive_reaction(self, payload):
        """
        Send result to all users when the owner add a reaction
        """
        channel = self.bot.get_channel(payload.channel_id)
        if payload.user_id != OWNER_ID or "suggestion" not in channel.name:
            return

        message = await channel.fetch_message(payload.message_id)
        if str(payload.emoji) == "✅":
            sql = "INSERT INTO suggestions (author, description) VALUES (%s, %s)"
            db.execute(sql, (message.author.name, message.content))

        for reaction in message.reactions:
            if str(reaction.emoji) == "✅":
                async for user in reaction.users():
                    await self.send_dm_suggestion_state(
                        user, str(payload.emoji), message
                    )
        await self.send_dm_suggestion_state(message.author, str(payload.emoji), message)

        await message.delete()

    async def send_dm_suggestion_state(self, user, decisive_emoji, suggestion):
        """
        Send a message to a member who has voted to inform of the state of the reaction
        """
        if user.id == self.bot.user.id or decisive_emoji not in ("✅", "❌"):
            return
        citation = "\n> ".join(suggestion.content.split("\n"))

        if decisive_emoji == "✅":
            embed = discord.Embed(
                colour=0xFF22BB,
                title="Suggestion acceptée!",
                description=(
                    f"**Félicitations!** "
                    f"La suggestion de **{suggestion.author.name}** pour laquelle "
                    f"vous avez voté a été acceptée:\n> {citation} \n\n"
                    "__Note__: \n Il faut parfois attendre plusieurs jours "
                    "avant qu'elle soit effective",
                ),
            )
        else:
            embed = discord.Embed(
                colour=0xFF22BB,
                title="Suggestion refusée!",
                description=(
                    f"**Mauvaise nouvelle...** "
                    f"la suggestion de **{suggestion.author.name}** pour laquelle "
                    f"vous avez voté a été malheureusement refusée:\n> {citation}\n\n"
                ),
            )
        embed.set_thumbnail(url="static/img/alert.png")
        embed.set_footer(
            text=f"{self.bot.user.name} | This message was sent automatically"
        )
        await user.send(embed=embed)


def setup(bot):
    bot.add_cog(Suggestion(bot))
